@using Newtonsoft.Json.Linq;
@using System.Globalization;

@section styles {
    <link href="~/css/visuals.min.css" rel="stylesheet" />
    <style>
        #visual {
            background-color: white;
            padding: 10px;
            margin: 5px;
        }
    </style>
}

@section scripts {
    <script src="~/lib/powerbi-visuals.all.min.js"></script>
    <script type="text/javascript">
        var createDataView = function (categoryValues, movieRatings) {
            var DataViewTransform = powerbi.data.DataViewTransform;

            var fieldExpr = powerbi.data.SQExprBuilder.fieldExpr({ column: { entity: "table1", name: "movie" } });

            var categoryIdentities = categoryValues.map(function (value) {
                var expr = powerbi.data.SQExprBuilder.equal(fieldExpr, powerbi.data.SQExprBuilder.text(value));
                return powerbi.data.createDataViewScopeIdentity(expr);
            });

            // Metadata, describes the data columns, and provides the visual with hints
            // so it can decide how to best represent the data
            var dataViewMetadata = {
                columns: [
                    {
                        displayName: 'Movie',
                        queryName: 'movie',
                        type: powerbi.ValueType.fromDescriptor({ text: true })
                    },
                    {
                        displayName: 'Votes',
                        isMeasure: true,
                        format: "0",
                        queryName: 'votes',
                        type: powerbi.ValueType.fromDescriptor({ numeric: true }),
                    }
                ],
            };

            var columns = [
                {
                    source: dataViewMetadata.columns[1],
                    values: movieRatings,
                }
            ];

            var dataValues = DataViewTransform.createValueColumns(columns);

            var dataView = {
                metadata: dataViewMetadata,
                categorical: {
                    categories: [{
                        source: dataViewMetadata.columns[0],
                        values: categoryValues,
                        identity: categoryIdentities,
                    }],
                    values: dataValues
                }
            };

            return dataView;
        };

        function createDefaultStyles() {
            var dataColors = new powerbi.visuals.DataColorPalette();

            return {
                titleText: {
                    color: { value: 'rgba(51,51,51,1)' }
                },
                subTitleText: {
                    color: { value: 'rgba(145,145,145,1)' }
                },
                colorPalette: {
                    dataColors: dataColors,
                },
                labelText: {
                    color: {
                        value: 'rgba(51,51,51,1)',
                    },
                    fontSize: '11px'
                },
                isHighContrast: false,
            };
        }

        function createVisual(dataViewFactory, elementId) {
            var pluginService = powerbi.visuals.visualPluginFactory.create();
            var defaultVisualHostServices = powerbi.visuals.defaultVisualHostServices;
            var width = 600;
            var height = 400;

            var element = $(elementId);
            element.height(height).width(width);


            // Get a plugin
            var visual = pluginService.getPlugin('donutChart').create();

            powerbi.visuals.DefaultVisualHostServices.initialize();

            visual.init({
                // empty DOM element the visual should attach to.
                element: element,
                // host services
                host: defaultVisualHostServices,
                style: createDefaultStyles(),
                viewport: {
                    height: height,
                    width: width
                },
                settings: { slicingEnabled: true },
                interactivity: { isInteractiveLegend: false, selection: false },
                animation: { transitionImmediate: true }
            });

            var dataViews = [dataViewFactory()],
                viewport = { height: height, width: width };

            if (visual.update) {
                // Call update to draw the visual with some data
                visual.update({
                    dataViews: dataViews,
                    viewport: viewport,
                    duration: 0
                });
            } else if (visual.onDataChanged && visual.onResizing) {
                // Call onResizing and onDataChanged (old API) to draw the visual with some data
                visual.onResizing(viewport);
                visual.onDataChanged({ dataViews: dataViews });
            }
        }
        $(function () {
            @{int j = 0;}
            @foreach (JObject question in ViewBag.Results["questions"])
            {
                @:createVisual(function() { return createDataView([@{WriteLiteral(String.Join(",", question["questionResults"].Select(r => String.Format("'{0}'", r["optionText"])))); }], [@String.Join(",",question["questionResults"].Select(r => r["optionCount"]))]); }, '#@String.Format("visual{0}", j++)');
            }
        });
    </script>
}
<div>
    <h1>Reporting</h1>
    <p>
        Total votes received: <b>@ViewBag.Results["totalVotes"]</b>
    </p>
    @{int i = 0;}
    @foreach (JObject question in ViewBag.Results["questions"])
    {
        <h2>@question["questionText"]</h2>
        <div id="@String.Format("visual{0}", i++)"></div>

    }
</div>

